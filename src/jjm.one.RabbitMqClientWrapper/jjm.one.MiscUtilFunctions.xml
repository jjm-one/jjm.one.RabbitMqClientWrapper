<?xml version="1.0"?>
<doc>
    <assembly>
        <name>jjm.one.RabbitMqClientWrapper</name>
    </assembly>
    <members>
        <member name="T:jjm.one.RabbitMqClientWrapper.di.core.RmqcCoreDi">
            <summary>
            This class contains function for dependency injection of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.di.core.RmqcCoreDi.AddRmqcCore(Microsoft.Extensions.DependencyInjection.IServiceCollection,jjm.one.RabbitMqClientWrapper.types.RmqcSettings)">
            <summary>
            Adds all dependencies ot the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>.
            </summary>
            <param name="services"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.di.RmqcWrapperDi">
            <summary>
            This class contains function for dependency injection of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.di.RmqcWrapperDi.AddRmqcWrapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,jjm.one.RabbitMqClientWrapper.types.RmqcSettings)">
            <summary>
            Adds all dependencies ot the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class to a <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/>.
            </summary>
            <param name="services"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore">
            <summary>
            This interface defines the core functionality to connect and communicate with a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Settings">
            <summary>
            This object contains the settings for the RabbitMQ client.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Connected">
            <summary>
            This flag indicates whether the client is connected the the RabbitMQ server or not.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Init">
            <summary>
            Init the connection to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.DeInit">
            <summary>
            De-init the connection to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Connect(System.Exception@)">
            <summary>
            Connect to the RabbitMQ server.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.Disconnect(System.Exception@)">
            <summary>
            Disconnect form the RabbitMQ server.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.WriteMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Exception@)">
            <summary>
            Write a <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> to the RabbitMQ server
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.ReadMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean,System.Exception@)">
            <summary>
            Read a <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> to the RabbitMQ server.
            </summary>
            <param name="message"></param>
            <param name="autoAck"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.AckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Exception@)">
            <summary>
            Ack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/>.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.NackMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean,System.Exception@)">
            <summary>
            Nack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/>.
            </summary>
            <param name="message"></param>
            <param name="requeue"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.WaitForWriteConfirm(System.TimeSpan,System.Exception@)">
            <summary>
            Wait until the server confirms the written <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/>.
            </summary>
            <param name="timeout"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.QueuedMsgs(System.Nullable{System.UInt32}@,System.Exception@)">
            <summary>
            Get the amount of <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> stored in the RabbitMQ server queue which are ready get read.
            </summary>
            <param name="amount"></param>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.ConnectCompleted">
            <summary>
            This events gets invoked when the connect function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.DisconnectCompleted">
            <summary>
            This events gets invoked when the disconnect function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.WriteMsgCompleted">
            <summary>
            This events gets invoked when the write msg function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.ReadMsgCompleted">
            <summary>
            This events gets invoked when the read msg function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.AckMsgCompleted">
            <summary>
            This events gets invoked when the ack msg function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.NAckMsgComplete">
            <summary>
            This events gets invoked when the nack msg function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.QueuedMsgsCompleted">
            <summary>
            This events gets invoked when the queued msg's function finishes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.ConnectionStateChanged">
            <summary>
            This events gets invoked when the connection status changes.
            </summary>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore.ErrorOccurred">
            <summary>
            This events gets invoked when an error occurred.
            </summary>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore">
            <summary>
            This class implements the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore"/> interface for a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Settings">
            <summary>
            This object contains the settings for the RabbitMQ client.
            Note:
            Changing the <see cref="P:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Settings"/> object of a connected client will result in the disconnection from the server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Connected">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.#ctor(jjm.one.RabbitMqClientWrapper.types.RmqcSettings,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.core.RmqcCore})">
            <summary>
            A parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class.
            </summary>
            <param name="settings"></param>
            <param name="logger"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.#ctor(jjm.one.RabbitMqClientWrapper.types.RmqcSettings,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.core.RmqcCore},RabbitMQ.Client.IConnectionFactory,RabbitMQ.Client.IConnection,RabbitMQ.Client.IModel)">
            <summary>
            A parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> class.
            For unit-tests only!
            </summary>
            <param name="settings"></param>
            <param name="logger"></param>
            <param name="connectionFactory"></param>
            <param name="connection"></param>
            <param name="channel"></param>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ConnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.DisconnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.WriteMsgCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ReadMsgCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.AckMsgCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.NAckMsgComplete">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.QueuedMsgsCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ConnectionStateChanged">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ErrorOccurred">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Init">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.DeInit">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Connect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.Disconnect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.WriteMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ReadMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.AckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.NackMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.WaitForWriteConfirm(System.TimeSpan,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.QueuedMsgs(System.Nullable{System.UInt32}@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnConnectCompleted(jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ConnectCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnDisconnectCompleted(jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.DisconnectCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnWriteMsgCompleted(jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.WriteMsgCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnReadMsgCompleted(jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ReadMsgCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnAckMsgCompleted(jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.AckMsgCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnNackMsgComplete(jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.NAckMsgComplete"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnQueuedMsgsCompleted(jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.QueuedMsgsCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnConnectionStateChanged(jjm.one.RabbitMqClientWrapper.types.events.ConnectionStatusChangedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ConnectionStateChanged"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.OnErrorOccurred(jjm.one.RabbitMqClientWrapper.types.events.ErrorOccurredEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore.ErrorOccurred"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper">
            <summary>
            This interface defines the core and additional functionality to connect and communicate with a RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.Connect">
            <summary>
            Connect to the RabbitMQ server.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.Disconnect">
            <summary>
            Disconnect from the RabbitMQ server.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReConnect">
            <summary>
            Disconnect and connects form the RabbitMQ server.
            </summary>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReConnect(System.Exception@)">
            <summary>
            Disconnect and connects form the RabbitMQ server.
            </summary>
            <param name="exception"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.WriteMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@)">
            <summary>
            Write a <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> to the RabbitMQ server
            </summary>
            <param name="message"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReadMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean)">
            <summary>
            Read a <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> to the RabbitMQ server.
            </summary>
            <param name="message"></param>
            <param name="autoAck"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.AckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@)">
            <summary>
            Ack a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/>.
            </summary>
            <param name="message"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.NAckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean)">
            <summary>
            NAck a received <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/>.
            </summary>
            <param name="message"></param>
            <param name="requeue"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.WaitForWriteConfirm(System.TimeSpan)">
            <summary>
            Wait until the server confirms the written <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/>.
            </summary>
            <param name="timeout"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.QueuedMsgs(System.Nullable{System.UInt32}@)">
            <summary>
            Get the amount of <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> queued in the RabbitMQ server queue which are ready get read.
            </summary>
            <param name="amount"></param>
            <returns><see langword="true"/> on success, else <see langword="false"/>.</returns>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper.ReConnectCompleted">
            <summary>
            This events gets invoked when the re-connect function finishes.
            </summary>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper">
            <summary>
            This class implements the <see cref="T:jjm.one.RabbitMqClientWrapper.main.IRmqcWrapper"/> interface for a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Settings">
            <summary>
            This object contains the settings for the RabbitMQ client.
            Note:
            Changing the <see cref="P:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Settings"/> object of a connected client will result in the disconnection from the server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Connected">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.#ctor(jjm.one.RabbitMqClientWrapper.main.core.IRmqcCore,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.RmqcWrapper})">
            <summary>
            A parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class.
            </summary>
            <param name="core"></param>
            <param name="logger"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.#ctor(jjm.one.RabbitMqClientWrapper.types.RmqcSettings,Microsoft.Extensions.Logging.ILogger{jjm.one.RabbitMqClientWrapper.main.RmqcWrapper})">
            <summary>
            A parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper"/> class.
            </summary>
            <param name="settings"></param>
            <param name="logger"></param>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ConnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.DisconnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnectCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WriteMsgCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReadMsgCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.AckMsgCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.NAckMsgComplete">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.QueuedMsgsCompleted">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ConnectionStateChanged">
            <inheritdoc />
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ErrorOccurred">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Init">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.DeInit">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Connect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Connect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.Disconnect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnect">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnect(System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WriteMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WriteMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReadMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReadMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.AckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.AckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.NAckMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.NackMsg(jjm.one.RabbitMqClientWrapper.types.RmqcMessage@,System.Boolean,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WaitForWriteConfirm(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WaitForWriteConfirm(System.TimeSpan,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.QueuedMsgs(System.Nullable{System.UInt32}@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.QueuedMsgs(System.Nullable{System.UInt32}@,System.Exception@)">
            <inheritdoc />
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnConnectCompleted(System.Object,jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ConnectCompleted"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnDisconnectCompleted(System.Object,jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.DisconnectCompleted"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnWriteMsgCompleted(System.Object,jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.WriteMsgCompleted"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnReadMsgCompleted(System.Object,jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReadMsgCompleted"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnAckMsgCompleted(System.Object,jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.AckMsgCompleted"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnNAckMsgComplete(System.Object,jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.NAckMsgComplete"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnQueuedMsgsCompleted(System.Object,jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.QueuedMsgsCompleted"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnConnectionStateChanged(System.Object,jjm.one.RabbitMqClientWrapper.types.events.ConnectionStatusChangedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ConnectionStateChanged"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnErrorOccurred(System.Object,jjm.one.RabbitMqClientWrapper.types.events.ErrorOccurredEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ErrorOccurred"/> envent handlers.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.OnReConnectCompleted(jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs)">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.main.RmqcWrapper.ReConnectCompleted"/> envent handlers.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs">
            <summary>
            This class represents the event args for a ack completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether sending the ack to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during sending the ack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to send the ack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs.DeliveryTag">
            <summary>
            The delivery tag of the ack msg.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{System.UInt64})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.AckMsgCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="deliveryTag"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs">
            <summary>
            This class represents the event args for a connection completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether connecting to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during connecting to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to connect to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ConnectCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ConnectionStatusChangedEventArgs">
            <summary>
            This class represents the event args for a connection status changed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ConnectionStatusChangedEventArgs.Status">
            <summary>
            The flag indicates the current connection status.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ConnectionStatusChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ConnectionStatusChangedEventArgs"/> class.
            </summary>
            <param name="status"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs">
            <summary>
            This class represents the event args for a disconnection completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether disconnecting from the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during disconnecting from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to disconnect from the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.DisconnectCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ErrorOccurredEventArgs">
            <summary>
            This class represents the event args for a error occurred event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ErrorOccurredEventArgs.Exception">
            <summary>
            The exception which may have occurred.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ErrorOccurredEventArgs.#ctor(System.Exception)">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ErrorOccurredEventArgs"/> class.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.MsgChangedEventArgs">
            <summary>
            This class represents the event args for a message changed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.MsgChangedEventArgs.ChangedMembers">
            <summary>
            The list of the names of all changed members.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.MsgChangedEventArgs.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.MsgChangedEventArgs"/> class.
            </summary>
            <param name="changedMembers"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs">
            <summary>
            This class represents the event args for a nack completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether sending the nack to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during sending the nack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to send the nack to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs.DeliveryTag">
            <summary>
            The delivery tag of the nack msg.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{System.UInt64})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.NackMsgCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="deliveryTag"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs">
            <summary>
            This class represents the event args for a queued msg's completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether getting the amount of queued msg's from the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during getting the amount of queued msg's from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to get the amount of queued msg's from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.Amount">
            <summary>
            The amount of queued msg's in the queue.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},System.Nullable{System.UInt32})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.QueuedMsgsCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="amount"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs">
            <summary>
            This class represents the event args for a read completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether reading a messages from the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during reading a messages from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to read a message from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs.Message">
            <summary>
            The read message.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan},jjm.one.RabbitMqClientWrapper.types.RmqcMessage)">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ReadMsgCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
            <param name="message"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs">
            <summary>
            This class represents the event args for a re-connection completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether re-connecting to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during re-connecting to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to re-connect to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.ReConnectCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs">
            <summary>
            This class represents the event args for a write completed event.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs.Successful">
            <summary>
            The flag indicates whether writing a message to the RabbitMQ server was successfully completed or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs.Exception">
            <summary>
            The exception which may have occurred during writing a message to the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs.CompletionTime">
            <summary>
            The amount of time it took to write a message to the RabbitMQ server.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs.#ctor(System.Boolean,System.Exception,System.Nullable{System.TimeSpan})">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.events.WriteMsgCompletedEventArgs"/> class.
            </summary>
            <param name="successful"></param>
            <param name="exception"></param>
            <param name="completionTime"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException">
            <summary>
            This class represents an exception which gets thrown if the <see cref="T:RabbitMQ.Client.IModel"/> in a <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> object is null or not initialized.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoChannelException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException">
            <summary>
            This class represents an exception which gets thrown if the <see cref="T:RabbitMQ.Client.IConnection"/> in a <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> object is null or not initialized.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException">
            <summary>
            This class represents an exception which gets thrown if the <see cref="T:RabbitMQ.Client.IConnectionFactory"/> in a <see cref="T:jjm.one.RabbitMqClientWrapper.main.core.RmqcCore"/> object is null or not initialized.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.NoConnectionFactoryException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException">
            <summary>
            This class represents an exception which gets thrown if the client is not initialized properly before performing an action.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.Operation">
            <summary>
            The name of the operation which causes the exception.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.#ctor(System.String)">
            <summary>
            A parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="T:System.Runtime.Serialization.ISerializable"/> compliant constructor for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.exceptions.UnInitializedClientException"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage">
            <summary>
            This class represents a message which gets send an received to or from the RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.DeliveryTag">
            <summary>
            The delivery tag of this message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.Redelivered">
            <summary>
            The redelivered flag of this message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.Exchange">
            <summary>
            The exchange to which the message was published to.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.MessageCount">
            <summary>
            The number of message in the queue.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.RoutingKey">
            <summary>
            The routing key of this message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.BasicProperties">
            <summary>
            The basic properties of the message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.Headers">
            <summary>
            The header entries of the message.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.BodyArray">
            <summary>
            The body containing the payload of the message. 
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.BodyString">
            <summary>
            The body containing the payload of the message.‚
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasReceived">
            <summary>
            This flag indicates whether the message was received via the client or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.TimestampWhenReceived">
            <summary>
            The Timestamp when the message was received.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasSend">
            <summary>
            This flag indicates whether the message was send via the client or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.TimestampWhenSend">
            <summary>
            The Timestamp when the message was send.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasAcked">
            <summary>
            This flag indicates whether the message was acked via the client or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.TimestampWhenAcked">
            <summary>
            The Timestamp when the message was send.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasNAcked">
            <summary>
            This flag indicates whether the message was nacked via the client or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasNAckedWithRequeue">
            <summary>
            This flag indicates whether the message was nacked  with or without requeue via the client or not.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.TimestampWhenNAcked">
            <summary>
            The Timestamp when the message was send.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasModified">
            <summary>
            This flag indicates whether the message was modified.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.WasSaved">
            <summary>
            This flag indicates whether the message was saved. (must be set by user!)
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.#ctor(RabbitMQ.Client.BasicGetResult)">
            <summary>
            The additional parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcMessage"/> class.
            </summary>
            <param name="rawMessage"></param>
        </member>
        <member name="E:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.Changed">
            <summary>
            This events gets invoked when the message got changed.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.OnChanged(System.Collections.Generic.List{System.String})">
            <summary>
            This method invokes the <see cref="E:jjm.one.RabbitMqClientWrapper.types.RmqcMessage.Changed"/> envent handlers.
            </summary>
            <param name="changedMembers"></param>
        </member>
        <member name="T:jjm.one.RabbitMqClientWrapper.types.RmqcSettings">
            <summary>
            This class defines the settings for a client connection to a RabbitMQ server.
            </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Hostname">
             <summary>
             The hostname of the RabbitMQ server.
            
             default value: localhost
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Port">
             <summary>
             The port of the RabbitMQ server.
            
             default value: 5672
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Username">
             <summary>
             The username of a RabbitMQ server user.
            
             default value: guest
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Password">
             <summary>
             The password of a RabbitMQ server user.
            
             default value: guest
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.VirtualHost">
             <summary>
             The virtual host at the RabbitMQ server.
            
             default value: /
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Exchange">
             <summary>
             The exchange at the RabbitMQ server.
            
             default value: amq.direct
             </summary>
        </member>
        <member name="P:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Queue">
            <summary>
            The queue at the RabbitMQ server.
            
            default value: ""
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.#ctor">
            <summary>
            The default constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcSettings"/> class.
            </summary>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.#ctor(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The parameterized constructor of the <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcSettings"/> class.
            </summary>
            <param name="hostname">The hostname of the RabbitMQ server.</param>
            <param name="port">The port of the RabbitMQ server.</param>
            <param name="username">The username of a RabbitMQ server user.</param>
            <param name="password">The password of a RabbitMQ server user.</param>
            <param name="virtualHost">The virtual host at the RabbitMQ server.</param>
            <param name="exchange">The exchange at the RabbitMQ server.</param>
            <param name="queue">The queue at the RabbitMQ server.</param>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcSettings"/> object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns><see langword="true"/> if the specified object is equal to the current object, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:jjm.one.RabbitMqClientWrapper.types.RmqcSettings.GetHashCode">
            <summary>
            Serves as the default hash function for the <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcSettings"/> class.
            </summary>
            <returns>A hash code for the current <see cref="T:jjm.one.RabbitMqClientWrapper.types.RmqcSettings"/> object.</returns>
        </member>
    </members>
</doc>
